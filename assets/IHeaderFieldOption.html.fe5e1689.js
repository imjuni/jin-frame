import{_ as s,r as d,o as l,c,a as e,b as n,w as o,d as t,e as i}from"./app.a6de780b.js";const h={},p=e("h1",{id:"interface-iheaderfieldoption",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#interface-iheaderfieldoption","aria-hidden":"true"},"#"),t(" Interface: IHeaderFieldOption")],-1),f=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),m=e("code",null,"ICommonFieldOption",-1),u=e("p",null,[t("\u21B3 "),e("strong",null,[e("code",null,"IHeaderFieldOption")])],-1),_=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),b=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),g=i('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="comma" tabindex="-1"><a class="header-anchor" href="#comma" aria-hidden="true">#</a> comma</h3><p>\u2022 <code>Optional</code> <strong>comma</strong>: <code>boolean</code></p><p>&quot;comma&quot; option only working array type variable. If you want to process array parameter of headers using by comma seperated string, set this option</p><p>Comma seperated array parameter on header</p><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4>',6),y={href:"https://github.com/imjuni/jin-frame/blob/e005d9d/src/interfaces/IHeaderFieldOption.ts#L23",target:"_blank",rel:"noopener noreferrer"},I=i('<hr><h3 id="encode" tabindex="-1"><a class="header-anchor" href="#encode" aria-hidden="true">#</a> encode</h3><p>\u2022 <code>Optional</code> <strong>encode</strong>: <code>boolean</code></p><p>Do encodeURIComponent execution, this option only executed in query parameter</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4>',5),x=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),v={href:"https://github.com/imjuni/jin-frame/blob/e005d9d/src/interfaces/ICommonFieldOption.ts#L3",target:"_blank",rel:"noopener noreferrer"},F=e("hr",null,null,-1),O=e("h3",{id:"formatters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#formatters","aria-hidden":"true"},"#"),t(" formatters")],-1),H=e("code",null,"Optional",-1),k=e("strong",null,"formatters",-1),j=e("code",null,"IFormatter",-1),C=e("code",null,"IFormatter",-1),D=i(`<p>formatter configuration, use convert date type or transform data shape</p><p><code>formatters</code> field only work when have valid input type.</p><p><code>formatters</code> fields operate in order of string formatter, dateTime formatter. So You can change a string to JavaScript Date instance using by string formatter and a converted Date instance to string using by dateTime formatter.</p><p><strong><code>Remarks</code></strong></p><p>If you use the string formatter to change to JavaScript Date instance and then do not change to a string, the formatters setting is: automatically convert to iso8601 string</p><p>header field don&#39;t need a findFrom. HTTP protocol header not treat complex type object and array.</p><p><strong><code>Url</code></strong></p><p>https://developer.mozilla.org/en-US/docs/Web/API/Headers</p><p><strong><code>Example</code></strong></p><p>ordered example.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{
  string: (value: string) =&gt; parse(value, &quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&quot;, new Date()),
  dateTime: (value: Date) =&gt; format(value, &#39;yyyy-MM-dd HH:mm:ss&#39;),
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4>`,12),w={href:"https://github.com/imjuni/jin-frame/blob/e005d9d/src/interfaces/IHeaderFieldOption.ts#L52",target:"_blank",rel:"noopener noreferrer"},q=i('<hr><h3 id="replaceat" tabindex="-1"><a class="header-anchor" href="#replaceat" aria-hidden="true">#</a> replaceAt</h3><p>\u2022 <code>Optional</code> <strong>replaceAt</strong>: <code>string</code></p><p>&quot;replaceAt&quot; option only working in body or header. If you want to create depth of body or header, set this option dot seperated string. See below,</p><p><strong><code>Example</code></strong></p><p><code>data.test.ironman</code> convert to <code>{ data: { test: { ironman: &quot;value here&quot; } } }</code></p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4>',7),L={href:"https://github.com/imjuni/jin-frame/blob/e005d9d/src/interfaces/IHeaderFieldOption.ts#L15",target:"_blank",rel:"noopener noreferrer"},T=e("hr",null,null,-1),S=e("h3",{id:"type",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type","aria-hidden":"true"},"#"),t(" type")],-1),A=e("p",null,[t("\u2022 "),e("strong",null,"type"),t(": "),e("code",null,'"header"')],-1),E=e("p",null,"field option discriminator",-1),M=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),N={href:"https://github.com/imjuni/jin-frame/blob/e005d9d/src/interfaces/IHeaderFieldOption.ts#L6",target:"_blank",rel:"noopener noreferrer"};function P(R,V){const a=d("RouterLink"),r=d("ExternalLinkIcon");return l(),c("div",null,[p,f,e("ul",null,[e("li",null,[e("p",null,[n(a,{to:"/api/interfaces/ICommonFieldOption.html"},{default:o(()=>[m]),_:1})]),u])]),_,b,e("ul",null,[e("li",null,[n(a,{to:"/api/interfaces/IHeaderFieldOption.html#comma"},{default:o(()=>[t("comma")]),_:1})]),e("li",null,[n(a,{to:"/api/interfaces/IHeaderFieldOption.html#encode"},{default:o(()=>[t("encode")]),_:1})]),e("li",null,[n(a,{to:"/api/interfaces/IHeaderFieldOption.html#formatters"},{default:o(()=>[t("formatters")]),_:1})]),e("li",null,[n(a,{to:"/api/interfaces/IHeaderFieldOption.html#replaceat"},{default:o(()=>[t("replaceAt")]),_:1})]),e("li",null,[n(a,{to:"/api/interfaces/IHeaderFieldOption.html#type"},{default:o(()=>[t("type")]),_:1})])]),g,e("p",null,[e("a",y,[t("src/interfaces/IHeaderFieldOption.ts:23"),n(r)])]),I,e("p",null,[n(a,{to:"/api/interfaces/ICommonFieldOption.html"},{default:o(()=>[t("ICommonFieldOption")]),_:1}),t("."),n(a,{to:"/api/interfaces/ICommonFieldOption.html#encode"},{default:o(()=>[t("encode")]),_:1})]),x,e("p",null,[e("a",v,[t("src/interfaces/ICommonFieldOption.ts:3"),n(r)])]),F,O,e("p",null,[t("\u2022 "),H,t(),k,t(": "),n(a,{to:"/api/interfaces/IFormatter.html"},{default:o(()=>[j]),_:1}),t(" | "),n(a,{to:"/api/interfaces/IFormatter.html"},{default:o(()=>[C]),_:1}),t("[]")]),D,e("p",null,[e("a",w,[t("src/interfaces/IHeaderFieldOption.ts:52"),n(r)])]),q,e("p",null,[e("a",L,[t("src/interfaces/IHeaderFieldOption.ts:15"),n(r)])]),T,S,A,E,M,e("p",null,[e("a",N,[t("src/interfaces/IHeaderFieldOption.ts:6"),n(r)])])])}const U=s(h,[["render",P],["__file","IHeaderFieldOption.html.vue"]]);export{U as default};
