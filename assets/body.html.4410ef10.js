import{_ as e,r as o,o as p,c,a as n,d as s,b as t,e as i}from"./app.a6de780b.js";const l={},r=i(`<p>Explain how to define header parameter using the jin-frame. The body parameter can be defined as the <code>body()</code> function and the <code>objectBody()</code>. This section describes the <code>body()</code> function.</p><h2 id="depth" tabindex="-1"><a class="header-anchor" href="#depth" aria-hidden="true">#</a> depth</h2><p><code>body()</code> function automatically generated 1 depth on <code>AxiosRequestConfig.data</code>. See below.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MarvelHeroPostFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JinEitherFrame</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinEitherFrame</span></span><span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinEitherFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinEitherFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> password<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> host<span class="token operator">:</span> <span class="token string">&#39;http://api.marvel-comics.com&#39;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&#39;/hero/:id&#39;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> args<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> args<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> args<span class="token punctuation">.</span>password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarvelHeroPostFrame</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> username<span class="token operator">:</span> <span class="token string">&#39;ironman&#39;</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token string">&#39;advengers&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> req <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you create <code>MarvelHeroPostFrame</code> and execute the <code>requset</code> function, the following body objects are created:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;timeout&quot;</span><span class="token operator">:</span> <span class="token number">120000</span><span class="token punctuation">,</span>
  <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ironman&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;advengers&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;transformRequest&quot;</span><span class="token operator">:</span> undefined<span class="token punctuation">,</span>
  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://api.marvel-comics.com/hero/1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;validateStatus&quot;</span><span class="token operator">:</span> undefined
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>req</code> value is type of <code>AxiosRequestConfig</code>.</p><p>If you look at the <code>data</code> field, you can see that the <code>username</code> and <code>password</code> keys are generated and value assigned. As such, the <code>body()</code> function is a function that defines a piece of the value to be entered into the body parameter.</p><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h2><p><code>body()</code> function use <code>string</code> and <code>number</code>, <code>boolean</code>, <code>Date</code>, <code>string[]</code>, <code>number[]</code>, <code>boolean[]</code>, <code>Date[]</code>, <code>object</code> type.</p><h2 id="formatters" tabindex="-1"><a class="header-anchor" href="#formatters" aria-hidden="true">#</a> formatters</h2><h3 id="single-formatters" tabindex="-1"><a class="header-anchor" href="#single-formatters" aria-hidden="true">#</a> single formatters</h3><p>The <code>body()</code> function can be changed to the wanted value using the formatters. The example below shows how to declare an epoch number type variable as a Date type and change the Date type to a number type using the getUnixTime function when the epoch variable is included in the request.</p><p><code>getUnixTime</code> function is included in package <code>date-fns</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> getUnixTime <span class="token keyword">from</span> <span class="token string">&#39;date-fns/getUnixTime&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">GetHeroFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JinFrame</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span> Date<span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    formatter<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">dateTime</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getUnixTime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> epoch<span class="token operator">:</span> Date<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> epoch<span class="token operator">:</span> Date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> host<span class="token operator">:</span> <span class="token string">&#39;http://api.marvel-comics.com&#39;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&#39;/hero/:id&#39;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>epoch <span class="token operator">=</span> epoch<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>formatters have three function like number, dateTime, string. Each function can be an input value for another formatters function.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> getUnixTime <span class="token keyword">from</span> <span class="token string">&#39;date-fns/getUnixTime&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">GetEpochFormatFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JinFrame</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span> Date<span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    formatter<span class="token operator">:</span> <span class="token punctuation">{</span>
      order<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dateTime&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token function-variable function">number</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getUnixTime</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">dateTime</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">liteFormat</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;yyyyMMddHHmmss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> epoch<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> epoch<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> host<span class="token operator">:</span> <span class="token string">&#39;http://api.marvel-comics.com&#39;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&#39;/release/:epoch&#39;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>epoch <span class="token operator">=</span> epoch<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GetEpochFormatFrame</code> adds 1 day to the epoch variable, converts it to a Date type using the getUnixTime function, and converts it to a string using the liteFormat function. <code>GetEpochFormatFrame</code> is an example. You can find another efficiency way to add a day and text it&#39;s</p><p><code>order</code> option deside that order of formatter apply. Default values are <code>[&#39;number&#39;, &#39;string&#39;, &#39;dateTime&#39;]</code></p><h3 id="multiple-formatters" tabindex="-1"><a class="header-anchor" href="#multiple-formatters" aria-hidden="true">#</a> multiple formatters</h3><p>You may need to apply formatters to multiple keys when the value defined by the function <code>body()</code> is <code>object</code>. See below.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IHeroInBody</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  bio<span class="token operator">:</span> <span class="token punctuation">{</span>
    birth<span class="token operator">:</span> Date<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MarvelHeroPostFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JinEitherFrame</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinEitherFrame</span></span><span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinEitherFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    formatters<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        findFrom<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">string</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Marvel SuperHero &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        findFrom<span class="token operator">:</span> <span class="token string">&#39;bio.birth&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">dateTime</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">lightFormat</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">yyyy-MM-dd&#39;T&#39;HH:mm:ss</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> hero<span class="token operator">:</span> IHeroInBody<span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinEitherFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> hero<span class="token operator">:</span> IHeroInBody<span class="token punctuation">;</span> password<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> host<span class="token operator">:</span> <span class="token string">&#39;http://api.marvel-comics.com&#39;</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&#39;/hero/:id&#39;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> args<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hero <span class="token operator">=</span> args<span class="token punctuation">.</span>hero<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> args<span class="token punctuation">.</span>password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>hero</code> class member variable defined by the function <code>body()</code> using the <code>IHeroInBody</code> interface. The above example shows the application of formatters to the <code>name</code> and <code>bio.birth</code> values in the <code>IHeroInBody</code> interface defined in this way.</p>`,23),u=n("code",null,"hero",-1),d=n("code",null,"findFrom",-1),k={href:"https://github.com/sindresorhus/dot-prop",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"hero",-1),v=n("h2",{id:"examples",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#examples","aria-hidden":"true"},"#"),s(" Examples")],-1),b={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/imjuni/jin-frame/blob/master/examples",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/jinframe.post.test.ts",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/request.body.ts",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.array.builder.test.ts",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.builder.test.ts",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.formatter.builder.test.ts",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.formatters.builder.test.ts",target:"_blank",rel:"noopener noreferrer"};function q(F,T){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("You want to access a child node in "),u,s(" object, you have to pass "),d,s(" option and that is use dot path(using "),n("a",k,[s("dot-prop"),t(a)]),s(" package). The class member variable name "),m,s(" should not be written down.")]),v,n("p",null,[s("You can found more example in "),n("a",b,[s("testcase"),t(a)]),s(" and "),n("a",h,[s("examples"),t(a)]),s(".")]),n("ul",null,[n("li",null,[n("a",f,[s("jinframe.post.test.ts"),t(a)])]),n("li",null,[n("a",y,[s("request.body.ts"),t(a)])]),n("li",null,[n("a",g,[s("body.array.builder.test.ts"),t(a)])]),n("li",null,[n("a",_,[s("body.builder.test.ts"),t(a)])]),n("li",null,[n("a",w,[s("body.formatter.builder.test.ts"),t(a)])]),n("li",null,[n("a",x,[s("body.formatters.builder.test.ts"),t(a)])])])])}const E=e(l,[["render",q],["__file","body.html.vue"]]);export{E as default};
