import{_ as o,r as p,o as i,c,a as n,b as e,d as s,e as t}from"./app.a6de780b.js";const r="/jin-frame/assets/axios-usage.5ce087a4.svg",l="/jin-frame/assets/jinframe-usage.f4ea1953.svg",u={},d=n("h1",{id:"jin-frame",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jin-frame","aria-hidden":"true"},"#"),s(" jin-frame")],-1),k={href:"https://npmcharts.com/compare/jin-frame?minimal=true",target:"_blank",rel:"noopener noreferrer"},m=n("img",{src:"https://img.shields.io/npm/dw/jin-frame.svg",alt:"Download Status"},null,-1),h={href:"https://github.com/imjuni/jin-frame",target:"_blank",rel:"noopener noreferrer"},v=n("img",{src:"https://img.shields.io/github/stars/imjuni/jin-frame.svg?style=popout",alt:"Github Star"},null,-1),f={href:"https://github.com/imjuni/jin-frame/issues",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"https://img.shields.io/github/issues-raw/imjuni/jin-frame.svg",alt:"Github Issues"},null,-1),g={href:"https://www.npmjs.com/package/jin-frame",target:"_blank",rel:"noopener noreferrer"},y=n("img",{src:"https://img.shields.io/npm/v/jin-frame.svg",alt:"NPM version"},null,-1),_={href:"https://github.com/imjuni/jin-frame/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},w=n("img",{src:"https://img.shields.io/npm/l/jin-frame.svg",alt:"License"},null,-1),x={href:"https://app.circleci.com/pipelines/github/imjuni/jin-frame?branch=master",target:"_blank",rel:"noopener noreferrer"},j=n("img",{src:"https://circleci.com/gh/imjuni/jin-frame.svg?style=shield",alt:"cti"},null,-1),q=t('<p>Reusable HTTP request definition library. Ok, Create <code>template</code> for Your HTTP Request!</p><table><thead><tr><th>Axios</th><th>Jin-Frame</th></tr></thead><tbody><tr><td><img src="'+r+'" alt="axios"></td><td><img src="'+l+'" alt="jin-frame"></td></tr></tbody></table><h2 id="why-jin-frame" tabindex="-1"><a class="header-anchor" href="#why-jin-frame" aria-hidden="true">#</a> Why jin-frame?</h2>',3),T={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},A=t(`<ol><li>TypeScript compiler can detect error at compile-time</li><li>HTTP request definition</li><li>Use Axios ecosystem</li></ol><h2 id="requirement" tabindex="-1"><a class="header-anchor" href="#requirement" aria-hidden="true">#</a> Requirement</h2><ol><li>TypeScript</li><li>Decorator <ul><li>enable experimentalDecorators, emitDecoratorMetadata option in tsconfig.json</li></ul></li></ol><h2 id="axios-version" tabindex="-1"><a class="header-anchor" href="#axios-version" aria-hidden="true">#</a> Axios version</h2><table><thead><tr><th>jin-frame</th><th>axios</th></tr></thead><tbody><tr><td>2.x</td><td>&lt;= 0.27.x</td></tr><tr><td>3.x</td><td>&gt;= 1.1.x</td></tr></tbody></table><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i jin-frame <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="useage" tabindex="-1"><a class="header-anchor" href="#useage" aria-hidden="true">#</a> Useage</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">TestPostQuery</span> <span class="token keyword">extends</span> <span class="token class-name">JinFrame</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span> replaceAt<span class="token operator">:</span> <span class="token string">&#39;test.hello.marvel.name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">{</span> replaceAt<span class="token operator">:</span> <span class="token string">&#39;test.hello.marvel.skill&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> skill<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JinFrame</span></span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">{</span> replaceAt<span class="token operator">:</span> <span class="token string">&#39;test.hello.marvel.gender&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token operator">:</span> OmitConstructorType<span class="token operator">&lt;</span>TestPostQuery<span class="token punctuation">,</span> <span class="token string">&#39;host&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;method&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;contentType&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> host<span class="token operator">:</span> <span class="token string">&#39;http://some.api.yanolja.com/jinframe/:id&#39;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> args<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> args<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> args<span class="token punctuation">.</span>skill<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> args<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TestPostQuery class create AxiosRequestConfig object below.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPostQuery</span><span class="token punctuation">(</span><span class="token string">&#39;ironman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;beam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// console.log show below,</span>
<span class="token punctuation">{</span>
  timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token punctuation">{</span> marvel<span class="token operator">:</span> <span class="token punctuation">{</span> skill<span class="token operator">:</span> <span class="token string">&#39;beam&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token punctuation">{</span> marvel<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;ironman&#39;</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  transformRequest<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  url<span class="token operator">:</span> <span class="token string">&#39;http://some.api.yanolja.com/jinframe/1&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">validateStatus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),P=n("em",null,"x-www-form-urlencoded",-1),S=n("em",null,"x-www-form-urlencoded",-1),F={href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/jinframe.post.test.ts",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>Execution is simple. Create curried function after execute that function. jin-frame using axios library so using on browser.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPostQuery</span><span class="token punctuation">(</span><span class="token string">&#39;ironman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;beam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or</span>
<span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also you can use either,</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// change base calss JinFrame to JinEitherFrame</span>
<span class="token keyword">class</span> <span class="token class-name">TestPostQuery</span> <span class="token keyword">extends</span> <span class="token class-name">JinEitherFrame</span> <span class="token punctuation">{</span>
  <span class="token comment">// your definition ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPostQuery</span><span class="token punctuation">(</span><span class="token string">&#39;ironman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;beam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFail</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// failover action</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="form" tabindex="-1"><a class="header-anchor" href="#form" aria-hidden="true">#</a> Form</h2><p>The form data is <code>multipart/form-data</code> and <code>application/x-www-form-urlencoded</code>. Use to upload files or submit form fields data.</p><h3 id="application-x-www-form-urlencoded" tabindex="-1"><a class="header-anchor" href="#application-x-www-form-urlencoded" aria-hidden="true">#</a> application/x-www-form-urlencoded</h3>`,7),R=n("code",null,"application/x-www-form-urlencoded",-1),E=n("code",null,"trasformRequest",-1),J={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"application/x-www-form-urlencoded",-1),Q=n("h3",{id:"multipart-form-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#multipart-form-data","aria-hidden":"true"},"#"),s(" multipart/form-data")],-1),N={href:"https://github.com/form-data/form-data",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"multipart/form-data",-1),B=n("h2",{id:"example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#example","aria-hidden":"true"},"#"),s(" Example")],-1),L={href:"https://github.com/imjuni/jin-frame/tree/master/examples",target:"_blank",rel:"noopener noreferrer"};function O(V,Y){const a=p("ExternalLinkIcon");return i(),c("div",null,[d,n("p",null,[n("a",k,[m,e(a)]),s(),n("a",h,[v,e(a)]),s(),n("a",f,[b,e(a)]),s(),n("a",g,[y,e(a)]),s(),n("a",_,[w,e(a)]),s(),n("a",x,[j,e(a)])]),q,n("p",null,[s("When the system designed by MSA architecture, it invokes many APIs repeatedly. These repetitive API calls can be optimized for method extraction by refectoring, but are hardly reusabled and easily make to mistakes. Jin-frame defines the API as a class. Defining APIs in this class allows static type verification with the help of the TypeScript compiler and reduces the probability of errors by abstracting API calls. Jin-frame can use "),n("a",T,[s("Axios"),e(a)]),s(" to call APIs directly or automatically process up to run.")]),A,n("p",null,[s("You can change name or skill parameter at run-time. Even if you can change host address. Every change don't make fail and create well-formed AxiosRequestConfig object. Also you can change request time and transformRequest, validateStatus parameter. "),P,s(" transformRequest already include. You only set content-type params. See "),S,s(),n("a",F,[s("testcase"),e(a)]),s(".")]),I,n("p",null,[R,s(" converts from data using the "),E,s(" function in "),n("a",J,[s("axios"),e(a)]),s(". For jin-frame, if you set the "),C,s(" to content-type, use the built-in transformRequest function or pass transformRequest function to constructor.")]),Q,n("p",null,[s("jin-frame uses the "),n("a",N,[s("form-data"),e(a)]),s(" package for form-data processing. If you set the "),D,s(" content-type, use the form-data package to generate the AxiosRequestConfig data field value. Alternatively, upload the file by passing the customBody constructor parameter.")]),B,n("p",null,[s("You can find more examples in "),n("a",L,[s("examples directory"),e(a)]),s(".")])])}const M=o(u,[["render",O],["__file","index.html.vue"]]);export{M as default};
