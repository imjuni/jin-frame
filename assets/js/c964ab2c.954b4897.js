"use strict";(self.webpackChunkjin_frame_docs=self.webpackChunkjin_frame_docs||[]).push([[388],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(n),d=a,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(h,o(o({ref:t},s),{},{components:n})):r.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const i={lang:"en-US",title:"Querystring",description:"Querystring usage"},o=void 0,p={unversionedId:"usage/querystring",id:"usage/querystring",title:"Querystring",description:"Querystring usage",source:"@site/docs/usage/querystring.md",sourceDirName:"usage",slug:"/usage/querystring",permalink:"/jin-frame/usage/querystring",draft:!1,tags:[],version:"current",frontMatter:{lang:"en-US",title:"Querystring",description:"Querystring usage"},sidebar:"tutorialSidebar",previous:{title:"Param",permalink:"/jin-frame/usage/param"},next:{title:"Constructor",permalink:"/jin-frame/more/constructor"}},l={},m=[{value:"type",id:"type",level:2},{value:"formatters",id:"formatters",level:2},{value:"Array",id:"array",level:2},{value:"Examples",id:"examples",level:2}],s={toc:m};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Explain how to define querystring parameter using the jin-frame."),(0,a.kt)("h2",{id:"type"},"type"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"query()")," function use ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Date")," type. You can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"string[]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"number[]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean[]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Date[]"),",",(0,a.kt)("inlineCode",{parentName:"p"},"object")," types(array of primitive type), but if you use them, they are automatically converted to strings, so be careful when using them."),(0,a.kt)("h2",{id:"formatters"},"formatters"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"query()")," function can be changed to the wanted value using the formatters. The example below shows how to declare an epoch number type variable as a Date type and change the Date type to a number type using the getUnixTime function when the epoch variable is included in the request."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getUnixTime")," function is included in package ",(0,a.kt)("inlineCode",{parentName:"p"},"date-fns"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import getUnixTime from 'date-fns/getUnixTime';\n\nclass GetHeroFrame extends JinFrame {\n  @JinFrame.param()\n  public readonly id: Date;\n\n  @JinFrame.query({\n    formatter: {\n      dateTime: (value) => getUnixTime(value),\n    },\n  })\n  public readonly epoch: Date;\n\n  constructor(id: number, epoch: Date) {\n    super({ host: 'http://api.marvel-comics.com', path: '/hero/:id', method: 'POST' });\n\n    this.id = id;\n    this.epoch = epoch;\n  }\n}\n")),(0,a.kt)("p",null,"formatters have three function like number, dateTime, string. Each function can be an input value for another formatters function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import getUnixTime from 'date-fns/getUnixTime';\n\nclass GetEpochFormatFrame extends JinFrame {\n  @JinFrame.param()\n  public readonly id: Date;\n\n  @JinFrame.query({\n    formatter: {\n      order: ['number', 'dateTime', 'string'],\n      number: (value) => getUnixTime(value + 86400),\n      dateTime: (value) => liteFormat(value, 'yyyyMMddHHmmss'),\n    },\n  })\n  public readonly epoch: number;\n\n  constructor(id: number, epoch: number) {\n    super({ host: 'http://api.marvel-comics.com', path: '/release/:epoch', method: 'POST' });\n\n    this.id = id;\n    this.epoch = epoch;\n  }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GetEpochFormatFrame")," adds 1 day to the epoch variable, converts it to a Date type using the getUnixTime function, and converts it to a string using the liteFormat function. ",(0,a.kt)("inlineCode",{parentName:"p"},"GetEpochFormatFrame")," is an example. You can find another efficiency way to add a day and text it's"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"order")," option deside that order of formatter apply. Default values are ",(0,a.kt)("inlineCode",{parentName:"p"},"['number', 'string', 'dateTime']")),(0,a.kt)("h2",{id:"array"},"Array"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"query()")," can pass an array of primitive type, but you have to converted to a string before it can be applied to url."),(0,a.kt)("p",null,"When the comma option is set to true, the array is combined with a ",(0,a.kt)("inlineCode",{parentName:"p"},",")," character to convert it into a plain string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class GetHeroFrame extends JinFrame {\n  @JinFrame.param({ comma: true })\n  public readonly skill: string[];\n\n  @JinFrame.param()\n  public readonly heroId: number;\n\n  constructor(comicId: number, heroId: number) {\n    super({ host: 'http://api.marvel-comics.com', path: '/comic/:comicId/hero/:heroId', method: 'POST' });\n\n    this.comicId = comicId;\n    this.heroId = heroId;\n  }\n}\n")),(0,a.kt)("p",null,"If declared as a array of primitive type, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"GetHeroFrame"),", when the comma option is set to true that will be combine into a string using ",(0,a.kt)("inlineCode",{parentName:"p"},",")," character."),(0,a.kt)("p",null,"If the 'comma' option is false, use ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/ko/docs/Web/API/URL/searchParams"},(0,a.kt)("inlineCode",{parentName:"a"},"URL.searchParams"))," to generate a Querystring. The generated Querystring looks like ",(0,a.kt)("inlineCode",{parentName:"p"},"skill=EnergyRepulsor&skill=SupersonicFlight")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"You can found more example in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__"},"testcase")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/imjuni/jin-frame/blob/master/examples"},"examples"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/jinframe.get.test.ts"},"jinframe.get.test.ts")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/overlap.get.ts"},"overlap.get.ts")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/examples/CommaSeperatedGetFrame.ts"},"CommaSeperatedGetFrame.ts")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/examples/OverlapDecoratorGetFrame.ts"},"OverlapDecoratorGetFrame.ts"))))}u.isMDXComponent=!0}}]);