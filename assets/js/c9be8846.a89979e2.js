"use strict";(self.webpackChunkjin_frame_docs=self.webpackChunkjin_frame_docs||[]).push([[342],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,h=d["".concat(l,".").concat(c)]||d[c]||u[c]||i;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={lang:"en-US",title:"Body",description:"Body usage"},o=void 0,s={unversionedId:"usage/body",id:"usage/body",title:"Body",description:"Body usage",source:"@site/docs/usage/body.md",sourceDirName:"usage",slug:"/usage/body",permalink:"/jin-frame/usage/body",draft:!1,tags:[],version:"current",frontMatter:{lang:"en-US",title:"Body",description:"Body usage"},sidebar:"tutorialSidebar",previous:{title:"IQueryParamCommonFieldOption",permalink:"/jin-frame/api/interfaces/IQueryParamCommonFieldOption"},next:{title:"Header",permalink:"/jin-frame/usage/header"}},l={},p=[{value:"depth",id:"depth",level:2},{value:"type",id:"type",level:2},{value:"formatters",id:"formatters",level:2},{value:"single formatters",id:"single-formatters",level:3},{value:"multiple formatters",id:"multiple-formatters",level:3},{value:"Examples",id:"examples",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Explain how to define header parameter using the jin-frame. The body parameter can be defined as the ",(0,r.kt)("inlineCode",{parentName:"p"},"body()")," function and the ",(0,r.kt)("inlineCode",{parentName:"p"},"objectBody()"),". This section describes the ",(0,r.kt)("inlineCode",{parentName:"p"},"body()")," function."),(0,r.kt)("h2",{id:"depth"},"depth"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"body()")," function automatically generated 1 depth on ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosRequestConfig.data"),". See below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class MarvelHeroPostFrame extends JinEitherFrame {\n  @JinEitherFrame.param()\n  public readonly id: string;\n\n  @JinEitherFrame.body()\n  public readonly username: string;\n\n  @JinEitherFrame.body()\n  public readonly password: string;\n\n  constructor(args: { id: string; username: string; password: string }) {\n    super({ host: 'http://api.marvel-comics.com', path: '/hero/:id', method: 'POST' });\n\n    this.id = args.id;\n    this.username = args.username;\n    this.password = args.password;\n  }\n}\n\nconst frame = new MarvelHeroPostFrame({ id: 1, username: 'ironman', password: 'advengers' });\nconst req = frame.request();\nconsole.log(req);\n")),(0,r.kt)("p",null,"When you create ",(0,r.kt)("inlineCode",{parentName:"p"},"MarvelHeroPostFrame")," and execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"requset")," function, the following body objects are created:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "timeout": 120000,\n  "headers": { "Content-Type": "application/json" },\n  "method": "POST",\n  "data": { "username": "ironman", "password": "advengers" },\n  "transformRequest": undefined,\n  "url": "http://api.marvel-comics.com/hero/1",\n  "validateStatus": undefined\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"req")," value is type of ",(0,r.kt)("inlineCode",{parentName:"p"},"AxiosRequestConfig"),"."),(0,r.kt)("p",null,"If you look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," field, you can see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," keys are generated and value assigned. As such, the ",(0,r.kt)("inlineCode",{parentName:"p"},"body()")," function is a function that defines a piece of the value to be entered into the body parameter."),(0,r.kt)("h2",{id:"type"},"type"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"body()")," function use ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"number[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," type."),(0,r.kt)("h2",{id:"formatters"},"formatters"),(0,r.kt)("h3",{id:"single-formatters"},"single formatters"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"body()")," function can be changed to the wanted value using the formatters. The example below shows how to declare an epoch number type variable as a Date type and change the Date type to a number type using the getUnixTime function when the epoch variable is included in the request."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getUnixTime")," function is included in package ",(0,r.kt)("inlineCode",{parentName:"p"},"date-fns"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import getUnixTime from 'date-fns/getUnixTime';\n\nclass GetHeroFrame extends JinFrame {\n  @JinFrame.param()\n  public readonly id: Date;\n\n  @JinFrame.body({\n    formatter: {\n      dateTime: (value) => getUnixTime(value),\n    },\n  })\n  public readonly epoch: Date;\n\n  constructor(id: number, epoch: Date) {\n    super({ host: 'http://api.marvel-comics.com', path: '/hero/:id', method: 'POST' });\n\n    this.id = id;\n    this.epoch = epoch;\n  }\n}\n")),(0,r.kt)("p",null,"formatters have three function like number, dateTime, string. Each function can be an input value for another formatters function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import getUnixTime from 'date-fns/getUnixTime';\n\nclass GetEpochFormatFrame extends JinFrame {\n  @JinFrame.param()\n  public readonly id: Date;\n\n  @JinFrame.body({\n    formatter: {\n      order: ['number', 'dateTime', 'string'],\n      number: (value) => getUnixTime(value + 86400),\n      dateTime: (value) => liteFormat(value, 'yyyyMMddHHmmss'),\n    },\n  })\n  public readonly epoch: number;\n\n  constructor(id: number, epoch: number) {\n    super({ host: 'http://api.marvel-comics.com', path: '/release/:epoch', method: 'POST' });\n\n    this.id = id;\n    this.epoch = epoch;\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GetEpochFormatFrame")," adds 1 day to the epoch variable, converts it to a Date type using the getUnixTime function, and converts it to a string using the liteFormat function. ",(0,r.kt)("inlineCode",{parentName:"p"},"GetEpochFormatFrame")," is an example. You can find another efficiency way to add a day and text it's"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"order")," option deside that order of formatter apply. Default values are ",(0,r.kt)("inlineCode",{parentName:"p"},"['number', 'string', 'dateTime']")),(0,r.kt)("h3",{id:"multiple-formatters"},"multiple formatters"),(0,r.kt)("p",null,"You may need to apply formatters to multiple keys when the value defined by the function ",(0,r.kt)("inlineCode",{parentName:"p"},"body()")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),". See below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface IHeroInBody {\n  name: string;\n  age: number;\n  bio: {\n    birth: Date;\n  };\n}\n\nclass MarvelHeroPostFrame extends JinEitherFrame {\n  @JinEitherFrame.param()\n  public readonly id: string;\n\n  @JinEitherFrame.body({\n    formatters: [\n      {\n        findFrom: 'name',\n        string: (value) => `Marvel SuperHero \"${value}\"`,\n      },\n      {\n        findFrom: 'bio.birth',\n        dateTime: (value) => lightFormat(value, `yyyy-MM-dd'T'HH:mm:ss`),\n      },\n    ],\n  })\n  public readonly hero: IHeroInBody;\n\n  @JinEitherFrame.body()\n  public readonly password: string;\n\n  constructor(args: { id: string; hero: IHeroInBody; password: string }) {\n    super({ host: 'http://api.marvel-comics.com', path: '/hero/:id', method: 'POST' });\n\n    this.id = args.id;\n    this.hero = args.hero;\n    this.password = args.password;\n  }\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"hero")," class member variable defined by the function ",(0,r.kt)("inlineCode",{parentName:"p"},"body()")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"IHeroInBody")," interface. The above example shows the application of formatters to the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"bio.birth")," values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"IHeroInBody")," interface defined in this way."),(0,r.kt)("p",null,"You want to access a child node in ",(0,r.kt)("inlineCode",{parentName:"p"},"hero")," object, you have to pass ",(0,r.kt)("inlineCode",{parentName:"p"},"findFrom")," option and that is use dot path(using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sindresorhus/dot-prop"},"dot-prop")," package). The class member variable name ",(0,r.kt)("inlineCode",{parentName:"p"},"hero")," should not be written down."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"You can found more example in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__"},"testcase")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/jin-frame/blob/master/examples"},"examples"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/jinframe.post.test.ts"},"jinframe.post.test.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/request.body.ts"},"request.body.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.array.builder.test.ts"},"body.array.builder.test.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.builder.test.ts"},"body.builder.test.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.formatter.builder.test.ts"},"body.formatter.builder.test.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/body.formatters.builder.test.ts"},"body.formatters.builder.test.ts"))))}d.isMDXComponent=!0}}]);