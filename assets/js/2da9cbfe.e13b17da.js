"use strict";(self.webpackChunkjin_frame_docs=self.webpackChunkjin_frame_docs||[]).push([[3],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),c=l(a),d=r,h=c["".concat(p,".").concat(d)]||c[d]||u[d]||i;return a?n.createElement(h,o(o({ref:t},s),{},{components:a})):n.createElement(h,o({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[c]="string"==typeof e?e:r,o[1]=m;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1677:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>m,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={lang:"en-US",title:"Param",description:"Param(url path parameter) usage"},o=void 0,m={unversionedId:"usage/param",id:"usage/param",title:"Param",description:"Param(url path parameter) usage",source:"@site/docs/usage/param.md",sourceDirName:"usage",slug:"/usage/param",permalink:"/jin-frame/usage/param",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/param.md",tags:[],version:"current",frontMatter:{lang:"en-US",title:"Param",description:"Param(url path parameter) usage"},sidebar:"tutorialSidebar",previous:{title:"Object Body",permalink:"/jin-frame/usage/object-body"},next:{title:"Querystring",permalink:"/jin-frame/usage/querystring"}},p={},l=[{value:"url",id:"url",level:2},{value:"type",id:"type",level:2},{value:"formatters",id:"formatters",level:2},{value:"Array",id:"array",level:2},{value:"Examples",id:"examples",level:2}],s={toc:l};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Explain how to define path parameter using the jin-frame."),(0,r.kt)("h2",{id:"url"},"url"),(0,r.kt)("p",null,"You have to add a variable to url to use path parameter. The url variable can be added with special character ",(0,r.kt)("inlineCode",{parentName:"p"},":")," and you can add url to the want path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class GetHeroFrame extends JinFrame {\n  @JinFrame.param()\n  public readonly comicId: number;\n\n  @JinFrame.param()\n  public readonly heroId: number;\n\n  constructor(comicId: number, heroId: number) {\n    super({ host: 'http://api.marvel-comics.com', path: '/comic/:comicId/hero/:heroId', method: 'POST' });\n\n    this.comicId = comicId;\n    this.heroId = heroId;\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GetHeroFrame")," use two url parameter. ",(0,r.kt)("inlineCode",{parentName:"p"},"comicId"),"and ",(0,r.kt)("inlineCode",{parentName:"p"},"heroId")," were used to represent the two ids in the url path."),(0,r.kt)("h2",{id:"type"},"type"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"param()")," function use ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," type. You can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"string[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"number[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean[]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date[]"),",",(0,r.kt)("inlineCode",{parentName:"p"},"object")," types(array of primitive type), but if you use them, they are automatically converted to strings, so be careful when using them."),(0,r.kt)("h2",{id:"formatters"},"formatters"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"param()")," function can be changed to the wanted value using the formatters. The example below shows how to declare an epoch number type variable as a Date type and change the Date type to a number type using the getUnixTime function when the epoch variable is included in the request."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getUnixTime")," function is included in package ",(0,r.kt)("inlineCode",{parentName:"p"},"date-fns"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import getUnixTime from 'date-fns/getUnixTime';\n\nclass GetHeroFrame extends JinFrame {\n  @JinFrame.param({\n    formatter: {\n      dateTime: (value) => `${getUnixTime(value)}`,\n    },\n  })\n  public readonly epoch: Date;\n\n  constructor(epoch: Date) {\n    super({ host: 'http://api.marvel-comics.com', path: '/release/:epoch', method: 'POST' });\n\n    this.epoch = epoch;\n  }\n}\n")),(0,r.kt)("p",null,"formatters have three function like number, dateTime, string. Each function can be an input value for another formatters function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import getUnixTime from 'date-fns/getUnixTime';\n\nclass GetEpochFormatFrame extends JinFrame {\n  @JinFrame.param({\n    formatter: {\n      order: ['number', 'dateTime', 'string'],\n      number: (value) => getUnixTime(value + 86400),\n      dateTime: (value) => liteFormat(value, 'yyyyMMddHHmmss'),\n    },\n  })\n  public readonly epoch: number;\n\n  constructor(epoch: number) {\n    super({ host: 'http://api.marvel-comics.com', path: '/release/:epoch', method: 'POST' });\n\n    this.epoch = epoch;\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GetEpochFormatFrame")," adds 1 day to the epoch variable, converts it to a Date type using the getUnixTime function, and converts it to a string using the liteFormat function. ",(0,r.kt)("inlineCode",{parentName:"p"},"GetEpochFormatFrame")," is an example. You can find another efficiency way to add a day and text it's"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"order")," option deside that order of formatter apply. Default values are ",(0,r.kt)("inlineCode",{parentName:"p"},"['number', 'string', 'dateTime']")),(0,r.kt)("h2",{id:"array"},"Array"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"param()")," can pass an array of primitive type, but you have to converted to a string before it can be applied to url."),(0,r.kt)("p",null,"When the comma option is set to true, the array is combined with a ",(0,r.kt)("inlineCode",{parentName:"p"},",")," character to convert it into a plain string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class GetHeroFrame extends JinFrame {\n  @JinFrame.param({ comma: true })\n  public readonly skill: string[];\n\n  @JinFrame.param()\n  public readonly heroId: number;\n\n  constructor(comicId: number, heroId: number) {\n    super({ host: 'http://api.marvel-comics.com', path: '/comic/:comicId/hero/:heroId', method: 'POST' });\n\n    this.comicId = comicId;\n    this.heroId = heroId;\n  }\n}\n")),(0,r.kt)("p",null,"If declared as a array of primitive type, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"GetHeroFrame"),", when the comma option is set to true that will be combine into a string using ",(0,r.kt)("inlineCode",{parentName:"p"},",")," character. When comma optoin is set to false or undefined that will be json serialize."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"You can found more example in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__"},"testcase")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/imjuni/jin-frame/blob/master/examples"},"examples"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/jinframe.get.test.ts"},"jinframe.get.test.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/src/__tests__/overlap.get.ts"},"overlap.get.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/examples/CommaSeperatedGetFrame.ts"},"CommaSeperatedGetFrame.ts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/imjuni/jin-frame/blob/master/examples/OverlapDecoratorGetFrame.ts"},"OverlapDecoratorGetFrame.ts"))))}c.isMDXComponent=!0}}]);