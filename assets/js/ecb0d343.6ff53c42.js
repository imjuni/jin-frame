"use strict";(self.webpackChunkjin_frame_docs=self.webpackChunkjin_frame_docs||[]).push([[623],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(r),y=o,d=m["".concat(p,".").concat(y)]||m[y]||u[y]||a;return r?n.createElement(d,i(i({ref:t},l),{},{components:r})):n.createElement(d,i({ref:t},l))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},3381:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={lang:"en-US",title:"Utility Types",description:"Utility Types of Jin-Frame"},i=void 0,s={unversionedId:"more/types",id:"more/types",title:"Utility Types",description:"Utility Types of Jin-Frame",source:"@site/docs/more/types.md",sourceDirName:"more",slug:"/more/types",permalink:"/jin-frame/more/types",draft:!1,tags:[],version:"current",frontMatter:{lang:"en-US",title:"Utility Types",description:"Utility Types of Jin-Frame"},sidebar:"tutorialSidebar",previous:{title:"File Upload",permalink:"/jin-frame/more/file-upload"}},p={},c=[{value:"ConstructorType",id:"constructortype",level:2},{value:"OmitConstructorType",id:"omitconstructortype",level:2},{value:"JinConstructorType",id:"jinconstructortype",level:2},{value:"JinOmitConstructorType",id:"jinomitconstructortype",level:2}],l={toc:c};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Jin-Frame has 2 utility types likes that ",(0,o.kt)("inlineCode",{parentName:"p"},"ConstructorType"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"OmitConstructorType"),". If you have created a request in a complex types of Jin-Frame, you have to also create a constructor parameter in a complex type. Utility types reduce overhead of that task."),(0,o.kt)("h2",{id:"constructortype"},"ConstructorType"),(0,o.kt)("p",null,"ConstructorType extract member variable only from Jin-Frame."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Test001PostFrame extends JinEitherFrame {\n  @JinEitherFrame.param()\n  public readonly passing!: string;\n\n  @JinEitherFrame.body()\n  public readonly username!: string[];\n\n  @JinEitherFrame.body()\n  public readonly password!: string;\n\n  constructor(args: ConstructorType<Test001PostFrame>) {\n    super({ ...args });\n  }\n}\n")),(0,o.kt)("h2",{id:"omitconstructortype"},"OmitConstructorType"),(0,o.kt)("p",null,"OmitConstructorType extract member variable only from Jin-Frame and some variable omit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Test001PostFrame extends JinEitherFrame {\n  @JinEitherFrame.param()\n  public readonly passing!: string;\n\n  @JinEitherFrame.body()\n  public readonly username!: string[];\n\n  @JinEitherFrame.body()\n  public readonly password!: string;\n\n  constructor(args: OmitConstructorType<Test001PostFrame, 'host' | 'method' | 'contentType'>) {\n    super({\n      ...args,\n      host: 'http://some.api.google.com/jinframe/:passing',\n      method: 'POST',\n    });\n  }\n}\n")),(0,o.kt)("h2",{id:"jinconstructortype"},"JinConstructorType"),(0,o.kt)("p",null,"OmitConstructorType extract member variable only from Jin-Frame and some variable omit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Test001PostFrame extends JinEitherFrame {\n  @JinEitherFrame.param()\n  public readonly passing!: string;\n\n  @JinEitherFrame.body()\n  public readonly username!: string[];\n\n  @JinEitherFrame.body()\n  public readonly password!: string;\n\n  // JinConstructorType omit 'host', 'path', 'method', 'contentType'\n  constructor(args: JinConstructorType<Test001PostFrame>) {\n    super({\n      ...args,\n      host: 'http://some.api.google.com/jinframe/:passing',\n      method: 'POST',\n    });\n  }\n}\n")),(0,o.kt)("h2",{id:"jinomitconstructortype"},"JinOmitConstructorType"),(0,o.kt)("p",null,"OmitConstructorType extract member variable only from Jin-Frame and some variable omit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Test001PostFrame extends JinEitherFrame {\n  @JinEitherFrame.param()\n  public readonly passing!: string;\n\n  @JinEitherFrame.body()\n  public readonly username!: string[];\n\n  @JinEitherFrame.body()\n  public readonly password!: string;\n\n  // JinConstructorType omit 'host', 'path', 'method', 'contentType'\n  constructor(args: JinOmitConstructorType<Test001PostFrame, 'usename'>) {\n    super({\n      ...args,\n      host: 'http://some.api.google.com/jinframe/:passing',\n      method: 'POST',\n    });\n  }\n}\n")))}m.isMDXComponent=!0}}]);